data = na.omit(data)
data
data = data[data$latitude>0,]
data = data[as.numeric(data$latitude)>0,]
head(data)
as.numeric(data$latitude)
data = read.csv("C:/Users/JYW/Desktop/Github/Data-Science-for-COVID-19/dataset/Case.csv")
data = data[data$province == "Daegu"| data$province == "Gyeongsangbuk-do"|data$province ==  "Gyeongsangnam-do",]
data = subset(data, select=c("confirmed","latitude","longitude"))
data = as.data.frame(data)
as.numeric(data$latitude)
data
data$latitude
as.numeric(data$latitude)
data = read.csv("C:/Users/JYW/Desktop/Github/Data-Science-for-COVID-19/dataset/Case.csv", as.is = T)
data = data[data$province == "Daegu"| data$province == "Gyeongsangbuk-do"|data$province ==  "Gyeongsangnam-do",]
data = subset(data, select=c("confirmed","latitude","longitude"))
data = as.data.frame(data)
data = data[as.numeric(data$latitude)>0,]
v
data = read.csv("C:/Users/JYW/Desktop/Github/Data-Science-for-COVID-19/dataset/Case.csv", as.is = T)
data = data[data$province == "Daegu"| data$province == "Gyeongsangbuk-do"|data$province ==  "Gyeongsangnam-do",]
data = subset(data, select=c("confirmed","latitude","longitude"))
data = as.data.frame(data)
head(data)
data$latitude
as.numeric(data$latitude)
data = data[as.numeric(data$latitude)>0,]
head(data)
data = as.data.frame(data)
data = data[as.numeric(data$latitude)>0,]
data
data = read.csv("C:/Users/JYW/Desktop/Github/Data-Science-for-COVID-19/dataset/Case.csv", as.is = T)
data = data[data$province == "Daegu"| data$province == "Gyeongsangbuk-do"|data$province ==  "Gyeongsangnam-do",]
data = subset(data, select=c("confirmed","latitude","longitude"))
data = as.data.frame(data)
data = data[as.numeric(data$latitude)>0,]
data
as.numeric(data$latitude)>0
data = read.csv("C:/Users/JYW/Desktop/Github/Data-Science-for-COVID-19/dataset/Case.csv", as.is = T)
data = data[data$province == "Daegu"| data$province == "Gyeongsangbuk-do"|data$province ==  "Gyeongsangnam-do",]
data = subset(data, select=c("confirmed","latitude","longitude"))
data = as.data.frame(data)
data = data[as.numeric(data$latitude)!=NA,]
data
data = read.csv("C:/Users/JYW/Desktop/Github/Data-Science-for-COVID-19/dataset/Case.csv", as.is = T)
data = data[data$province == "Daegu"| data$province == "Gyeongsangbuk-do"|data$province ==  "Gyeongsangnam-do",]
data = subset(data, select=c("confirmed","latitude","longitude"))
data = as.data.frame(data)
data
as.numeric(data$latitude)
as.numeric(data$latitude)!=NA
as.numeric(data$latitude)!=NaN
as.numeric(data$latitude)>0
data = data[as.numeric(data$latitude)>0,]
data
data = read.csv("C:/Users/JYW/Desktop/Github/Data-Science-for-COVID-19/dataset/Case.csv", as.is = T)
data = data[data$province == "Daegu"| data$province == "Gyeongsangbuk-do"|data$province ==  "Gyeongsangnam-do",]
data = subset(data, select=c("confirmed","latitude","longitude"))
data = as.data.frame(data)
data
data$latitude
data$latitude!="-"
data = data[data$latitude!="-",]
data
plot.point.ref <- function(spatialdata, vals) {
pal <- tim.colors(10)
ints <- classIntervals(vals, n = 8, style = "pretty")
# also see style options "quantile" and "fisher"
intcols <- findColours(ints, pal) # vector of colors
# if pal doesn't have the same length as # classes, findColours will interpolate
par(mar = rep(3, 4))
plot(spatialdata, col = intcols, pch = 19)
points(spatialdata, pch = 1)
legend("right", fill = attr(intcols, "palette"),
legend = names(attr(intcols, "table")), bty = "n")
legend("topright",
legend = coef, bty = "n")
}
lin <- lm(confirmed ~ longitude + latitude , data = data)
coef <- paste0("<Coefficients>","\n",
"intercept:",round(lin$coefficients[1],2),"\n",
"longitude(beta 1):",round(lin$coefficients[2],2),"\n",
"lattitude(beta 2):",round(lin$coefficients[3],2))
fitted <- predict(lin, newdata = data)
fitted
ehat <- data$avgtemp - fitted # residuals
data
as.numeric(data)
data = as.data.frame(data)
as.numeric(data)
data = read.csv("C:/Users/JYW/Desktop/Github/Data-Science-for-COVID-19/dataset/Case.csv", as.is = T)
data = data[data$province == "Daegu"| data$province == "Gyeongsangbuk-do"|data$province ==  "Gyeongsangnam-do",]
data = subset(data, select=c("confirmed","latitude","longitude"))
data = as.matrix(data)
data
as.numeric(data)
data = read.csv("C:/Users/JYW/Desktop/Github/Data-Science-for-COVID-19/dataset/Case.csv", as.is = T)
data = data[data$province == "Daegu"| data$province == "Gyeongsangbuk-do"|data$province ==  "Gyeongsangnam-do",]
data = subset(data, select=c("confirmed","latitude","longitude"))
as.numeric(data)
data = read.csv("C:/Users/JYW/Desktop/Github/Data-Science-for-COVID-19/dataset/Case.csv", as.is = T)
data = data[data$province == "Daegu"| data$province == "Gyeongsangbuk-do"|data$province ==  "Gyeongsangnam-do",]
data = subset(data, select=c("confirmed","latitude","longitude"))
data = as.matrix(data)
as.numeric(data)
data = matrix(as.numeric(data), ncol=3)
data
data = data[data$latitude!=NA,]
data
data = as.matrix(data)
data = read.csv("C:/Users/JYW/Desktop/Github/Data-Science-for-COVID-19/dataset/Case.csv", as.is = T)
data = data[data$province == "Daegu"| data$province == "Gyeongsangbuk-do"|data$province ==  "Gyeongsangnam-do",]
data = subset(data, select=c("confirmed","latitude","longitude"))
data = as.matrix(data)
data
data = data[data$latitude!="-",]
data = data[data[,2]!="-",]
data
data = matrix(as.numeric(data), ncol=3)
data
plot.point.ref <- function(spatialdata, vals) {
pal <- tim.colors(10)
ints <- classIntervals(vals, n = 8, style = "pretty")
# also see style options "quantile" and "fisher"
intcols <- findColours(ints, pal) # vector of colors
# if pal doesn't have the same length as # classes, findColours will interpolate
par(mar = rep(3, 4))
plot(spatialdata, col = intcols, pch = 19)
points(spatialdata, pch = 1)
legend("right", fill = attr(intcols, "palette"),
legend = names(attr(intcols, "table")), bty = "n")
legend("topright",
legend = coef, bty = "n")
}
lin <- lm(confirmed ~ longitude + latitude , data = data)
data = as.data.frame(matrix(as.numeric(data), ncol=3))
data
source('~/.active-rstudio-document', echo=TRUE)
data = read.csv("C:/Users/JYW/Desktop/Github/Data-Science-for-COVID-19/dataset/Case.csv", as.is = T)
data = data[data$province == "Daegu"| data$province == "Gyeongsangbuk-do"|data$province ==  "Gyeongsangnam-do",]
data = subset(data, select=c("confirmed","latitude","longitude"))
data = as.matrix(data)
data = data[data[,2]!="-",]
data = as.data.frame(matrix(as.numeric(data), ncol=3))
data
data = read.csv("C:/Users/JYW/Desktop/Github/Data-Science-for-COVID-19/dataset/Case.csv", as.is = T)
data
data = data[data$province == "Daegu"| data$province == "Gyeongsangbuk-do"|data$province ==  "Gyeongsangnam-do",]
data = subset(data, select=c("confirmed","latitude","longitude"))
data = as.matrix(data)
data
data = as.matrix(data)
data = data[data[,2]!="-",]
data = as.data.frame(matrix(as.numeric(data), ncol=3))
colnames(data) <- c("confirmed", "lat", "lon")
data = read.csv("C:/Users/JYW/Desktop/Github/Data-Science-for-COVID-19/dataset/Case.csv", as.is = T)
data = data[data$province == "Daegu"| data$province == "Gyeongsangbuk-do"|data$province ==  "Gyeongsangnam-do",]
data = subset(data, select=c("confirmed","latitude","longitude"))
data = as.matrix(data)
data = data[data[,2]!="-",]
data = as.data.frame(matrix(as.numeric(data), ncol=3))
colnames(data) <- c("confirmed", "lat", "lon")
data
lin <- lm(confirmed ~ lon + lat , data = data)
coef <- paste0("<Coefficients>","\n",
"intercept:",round(lin$coefficients[1],2),"\n",
"longitude(beta 1):",round(lin$coefficients[2],2),"\n",
"lattitude(beta 2):",round(lin$coefficients[3],2))
fitted <- predict(lin, newdata = data)
ehat <- data$avgtemp - fitted # residuals
par(mfrow=c(1,1))
x11()
plot.point.ref(data, ehat)
data
ehat
fitted
ehat <- data$confirmed - fitted # residuals
ehat
plot.point.ref(data, ehat)
coordinates(data)
?coordinates
coordinates(data)
coordinates(data) <- data$lat
source('~/.active-rstudio-document', echo=TRUE)
data$lat
map('state', region = usa.data$states, fill = TRUE, col = as.character(usa.data$col.level))
plot(data)
x11()
plot(data)
data[,2:3]
plot(data[,2:3])
plot(data[,2:3], cex=data[,1], pch=20, col='red', main='Precipitation')
plot(data[,2:3], cex=data[,1], pch=1, col='red', main='Precipitation')
plot(data[,2:3], cex=data[,1], pch=0.3, col='red', main='Precipitation')
x11()
plot(data[,2:3], cex=data[,1], pch=0.3, col='red', main='Precipitation')
plot(data[,2:3], cex=data[,1], pch=1, col='red', main='Precipitation')
plot(data[,2:3], cex=data[,1], pch=0.001, col='red', main='Precipitation')
plot(data[,2:3], cex=data[,1], pch=0, col='red', main='Precipitation')
plot(data[,2:3], cex=data[,1], pch=1, col='red', main='Precipitation')
class(data)
class(CAtemp)
SpatialPoints(coords = data[,1:2])
SpatialPoints(coords = data[,2:3])
sp <- SpatialPoints(coords = data[,2:3])
data_sp <- SpatialPointsDataFrame(sp, data=data)
data_sp
data_sp <- SpatialPointsDataFrame(sp, data=data$confirmed)
data$confirmed
data_sp <- SpatialPointsDataFrame(sp, data=as.data.frame(data$confirmed))
data_sp
par(mfrow=c(1,1))
x11()
plot.point.ref(data_sp, ehat)
map("county", region = "california", add = TRUE)
map("county", region = "daegu", add = TRUE)
?map
map("world", region = "daegu", add = TRUE)
map("world", region = "daegu", add = TRUE)
map("world", region = "korea", add = TRUE)
map("world", region = 'South Korea', add = TRUE)
x11()
plot.point.ref(data_sp, ehat)
map("world", region = 'South Korea', add = TRUE)
#### 시/도 구분
list.dirs(path = './data')
setwd("C:/Users/JYW/Desktop/Github/Data-Science-for-COVID-19/dataset")
#### 시/도 구분
list.dirs(path = './data')
#### 시/도 구분
list.dirs(path = '.')
#### 시/도 구분
list.dirs(path = '')
#### 시/도 구분
list.dirs(path = 'C:/Users/JYW/Desktop/Github/Data-Science-for-COVID-19/dataset')
#### 시/도 구분
library(ggmap)
#### 시/도 구분
install.packages("ggmap")
library(ggplot2)
library(ggmap)
list.dirs(path = 'C:/Users/JYW/Desktop/Github/Data-Science-for-COVID-19/dataset')
list.files(path = 'C:/Users/JYW/Desktop/Github/Data-Science-for-COVID-19/dataset')
install.packages("rgdal")
library(rgdal)
sido <-
rgdal::readOGR(
dsn = 'C:/Users/JYW/Desktop/Github/Data-Science-for-COVID-19/dataset',
layer = 'korea',
encoding = 'CP949')
class(x=sido)
sido
sidoDf <- fortify(model = sido)
str(object = sidoDf)
sido@data
sido@data$id <- rownames(x = sido@data)
sidoDf <- merge(x = sidoDf,
y = sido@data[, c('id', 'BASE_YEAR', 'SIDO_CD', 'SIDO_NM')],
by = 'id',
all.x = TRUE)
str(object = sidoDf)
sido@data
sidoDf = sidoDf %>% left_join(sido@data, by = "id")
library(dplyr)
sidoDf = sidoDf %>% left_join(sido@data, by = "id")
sidoDF
sidoDf
head(sidoDf,3)
sidoDf <- sidoDf[order(sidoDf$id, sidoDf$order), ]
head(sidoDf,3)
table(sidoDf$CTP_ENG_NM) %>% sort()
set.seed(2019311266)
library(mvtnorm)
library(fields) # for Matern function
#### (b) ####
# 1. Setting Mu & Sigma
N = 500 # set number of observations
n = 3 # set dimmesion
mu <- sample(seq(0, 1, length = 10000),n) # set arbitrary mu
x <- seq(0,1, length=N) # fine grid
d <- as.matrix(dist(x)) # create distance matrix
sigma <- Matern(d, range = 1, nu = 0.5) # Matern Cov, same as exp
# 2. Calculate L
L <- t(chol(sigma)) ; L
# 3. Sample Z (Standard MVN)
Z <- matrix(rnorm(N*n, 0, 1),N,n) ; Z
# 4. Obtain Y by the Quiz's method
y <- L%*%Z + matrix(rep(mu,N), byrow=TRUE,ncol=3)
colname <- c() # for setting column names
for(i in 1:n){colname[i] <- paste0("X", i)}
colnames(y) <- colname
head(y)
ylim <- range(y)
par(mfrow = c(1, 1))
matplot(x, y, type = "l", ylab = "Y(x)", ylim = ylim, main = "(0,1) mu and Exp matern")
#### (c) ####
# 1. Change the mu
mu1 <- seq(1, 2, length = n) # chane mu's range
y_mu_change <- L%*%Z + matrix(rep(mu1,N), byrow=TRUE,ncol=3)
colnames(y_mu_change) <- colname
par(mfrow = c(1, 2))
ylim1 <- c(-1,2)
matplot(x, y, type = "l", ylab = "Y(x)", ylim = ylim1, main = "(0,1) mu")
matplot(x, y_mu_change, type = "l", ylab = "Y(x)", ylim = ylim1, main = "(1,2) mu")
# 2. Change the matern
## 2-1. change the nu
sigma1 <- Matern(d, range = 1, nu = 0.3) # change smoothness
sigma2 <- Matern(d, range = 1, nu = 1) # change smoothness
L1 <- t(chol(sigma1)) ; L1
L2 <- t(chol(sigma2)) ; L2
y_sigma1 <- L1%*%Z + matrix(rep(mu,N), byrow=TRUE,ncol=3)
y_sigma2 <- L2%*%Z + matrix(rep(mu,N), byrow=TRUE,ncol=3)
par(mfrow = c(1, 3))
matplot(x, y, type = "l", ylab = "Y(x)", ylim = ylim, main = "nu = 0.5")
matplot(x, y_sigma1, type = "l", ylab = "Y(x)", ylim = ylim, main = "nu = 0.3")
matplot(x, y_sigma2, type = "l", ylab = "Y(x)", ylim = ylim, main = "nu = 1")
## 2-2. change the range
sigma3 <- Matern(d, range = 0.5, nu = 0.5) # change smoothness
sigma4 <- Matern(d, range = 2, nu = 0.5) # change smoothness
L3 <- t(chol(sigma3)) ; L3
L4 <- t(chol(sigma4)) ; L4
y_sigma3 <- L3%*%Z + matrix(rep(mu,N), byrow=TRUE,ncol=3)
y_sigma4 <- L4%*%Z + matrix(rep(mu,N), byrow=TRUE,ncol=3)
par(mfrow = c(1, 3))
matplot(x, y, type = "l", ylab = "Y(x)", ylim = ylim, main = "Sigma range = 1")
matplot(x, y_sigma3, type = "l", ylab = "Y(x)", ylim = ylim, main = "Sigma range = 0.5")
matplot(x, y_sigma4, type = "l", ylab = "Y(x)", ylim = ylim, main = "Sigma range = 2")
x11()
par(mfrow = c(1, 3))
matplot(x, y, type = "l", ylab = "Y(x)", ylim = ylim, main = "Sigma range = 1")
matplot(x, y_sigma3, type = "l", ylab = "Y(x)", ylim = ylim, main = "Sigma range = 0.5")
matplot(x, y_sigma4, type = "l", ylab = "Y(x)", ylim = ylim, main = "Sigma range = 2")
table(sidoDf$CTP_ENG_NM) %>% sort()
sidoDf1 <- sidoDf[sidoDf$CTP_ENG_NM == "Daegu"|sidoDf$CTP_ENG_NM == "Gyeongsangbuk-do"|sidoDf$CTP_ENG_NM == "Gyeongsangnam-do", ]
nrow(x = sidoDf1)
sidoMap <-
ggplot(data = sidoDf1,
mapping = aes(x = long,
y = lat,
group = group)) +
geom_polygon(fill = 'white',
color = 'black') +
my_theme
my_theme <- theme(panel.background = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5,
face = 'bold'))
sidoMap <-
ggplot(data = sidoDf1,
mapping = aes(x = long,
y = lat,
group = group)) +
geom_polygon(fill = 'white',
color = 'black') +
my_theme
# sidoMap을 그립니다.
sidoMap
# sidoMap을 그립니다.
x11()
sidoMap
x11()
plot.point.ref(data_sp, ehat)
lines(sidomap)
lines(sidoMap)
map(sidoMap)
my_theme <- theme(panel.background = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5,
face = 'bold')
, add = TRUE)
sidoMap <-
ggplot(data = sidoDf1, add = TRUE,
mapping = aes(x = long,
y = lat,
group = group)) +
geom_polygon(fill = 'white',
color = 'black') +
my_theme
sidoMap
plot.point.ref(data_sp, ehat, , add = TRUE)
plot.point.ref(data_sp, ehat, add = TRUE)
plot.point.ref(data_sp, ehat)
x11()
plot.point.ref(data_sp, ehat)
plot.point.ref <- function(spatialdata, vals) {
pal <- tim.colors(10)
ints <- classIntervals(vals, n = 8, style = "pretty")
# also see style options "quantile" and "fisher"
intcols <- findColours(ints, pal) # vector of colors
# if pal doesn't have the same length as # classes, findColours will interpolate
par(mar = rep(3, 4))
plot(spatialdata, col = intcols, pch = 19, add=TRUE)
points(spatialdata, pch = 1)
legend("right", fill = attr(intcols, "palette"),
legend = names(attr(intcols, "table")), bty = "n")
legend("topright",
legend = coef, bty = "n")
}
sidoMap
plot.point.ref(data_sp, ehat)
data_sp
sidoMap
sidoDf1
head(sidoDf1,3)
data_sp
sidoMap <-
ggplot(data = sidoDf1,
mapping = aes(x = lat,
y = long,
group = group)) +
geom_polygon(fill = 'white',
color = 'black') +
my_theme
# sidoMap을 그립니다.
x11()
sidoMap
plot.point.ref(data_sp, ehat)
plot.point.ref <- function(spatialdata, vals) {
pal <- tim.colors(10)
ints <- classIntervals(vals, n = 8, style = "pretty")
# also see style options "quantile" and "fisher"
intcols <- findColours(ints, pal) # vector of colors
# if pal doesn't have the same length as # classes, findColours will interpolate
par(mar = rep(3, 4))
plot(spatialdata, col = intcols, pch = 19, add=TRUE)
points(spatialdata, pch = 1)
legend("right", fill = attr(intcols, "palette"),
legend = names(attr(intcols, "table")), bty = "n")
legend("topright",
legend = coef, bty = "n")
}
data_sp
plot.point.ref(data_sp, ehat)
sidoMap <-
ggplot(data = sidoDf1,add=TRUE,
mapping = aes(x = lat,
y = long,
group = group)) +
geom_polygon(fill = 'white',
color = 'black') +
my_theme
sidoMap
plot.point.ref <- function(spatialdata, vals) {
pal <- tim.colors(10)
ints <- classIntervals(vals, n = 8, style = "pretty")
# also see style options "quantile" and "fisher"
intcols <- findColours(ints, pal) # vector of colors
# if pal doesn't have the same length as # classes, findColours will interpolate
par(mar = rep(3, 4))
plot(spatialdata, col = intcols, pch = 19, add=TRUE)
points(spatialdata, pch = 1)
legend("right", fill = attr(intcols, "palette"),
legend = names(attr(intcols, "table")), bty = "n")
legend("topright",
legend = coef, bty = "n")
}
plot.point.ref(data_sp, ehat)
data_sp
data[,2:3]
cbind(data[,2],data[,3])
cbind(data[,3],data[,2])
data[,3:2]
sp <- SpatialPoints(coords = data[,3:2])
data_sp <- SpatialPointsDataFrame(sp, data=as.data.frame(data$confirmed))
plot.point.ref(data_sp, ehat)
sp <- SpatialPoints(coords = data[,3:2])
data_sp <- SpatialPointsDataFrame(sp, data=as.data.frame(data$confirmed))
x11()
plot.point.ref(data_sp, ehat)
data = read.csv("C:/Users/JYW/Desktop/Github/Data-Science-for-COVID-19/dataset/Case.csv", as.is = T)
data = data[data$province == "Daegu"| data$province == "Gyeongsangbuk-do"|data$province ==  "Gyeongsangnam-do",]
data = subset(data, select=c("confirmed","latitude","longitude"))
data = as.matrix(data)
data = data[data[,2]!="-",]
data = as.data.frame(matrix(as.numeric(data), ncol=3))
colnames(data) <- c("confirmed", "lat", "lon")
data
plot.point.ref <- function(spatialdata, vals) {
pal <- tim.colors(10)
ints <- classIntervals(vals, n = 8, style = "pretty")
# also see style options "quantile" and "fisher"
intcols <- findColours(ints, pal) # vector of colors
# if pal doesn't have the same length as # classes, findColours will interpolate
par(mar = rep(3, 4))
plot(spatialdata, col = intcols, pch = 19, add=TRUE)
points(spatialdata, pch = 1)
legend("right", fill = attr(intcols, "palette"),
legend = names(attr(intcols, "table")), bty = "n")
legend("topright",
legend = coef, bty = "n")
}
lin <- lm(confirmed ~ lon + lat , data = data)
coef <- paste0("<Coefficients>","\n",
"intercept:",round(lin$coefficients[1],2),"\n",
"longitude(beta 1):",round(lin$coefficients[2],2),"\n",
"lattitude(beta 2):",round(lin$coefficients[3],2))
fitted <- predict(lin, newdata = data)
ehat <- data$confirmed - fitted # residuals
class(data)
sp <- SpatialPoints(coords = data[,3:2])
data_sp <- SpatialPointsDataFrame(sp, data=as.data.frame(data$confirmed))
data_sp
plot.point.ref(data_sp, ehat)
x11()
plot.point.ref(data_sp, ehat)
x11()
plot.point.ref(data_sp, ehat)
